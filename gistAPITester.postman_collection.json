{
	"variables": [],
	"info": {
		"name": "gistAPITester",
		"_postman_id": "45c13669-333a-5b60-9bc8-c96487409200",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "testNumberOfGistsReturned",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"var count = 0;",
							"for (var i = 0; i < jsonData.length; i++) {",
							"    count++;",
							"}",
							"",
							"tests[\"Gist count >= 30\"] = count >= 30;",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							" "
						]
					}
				}
			],
			"request": {
				"url": "https://api.github.com/gists",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "testProfWolfordsPublicGistCount",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Test 2.",
							"tests[\"Prof. Wolfords Public Gist count >= 1\"] = jsonData.public_gists >= 1;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							" "
						]
					}
				}
			],
			"request": {
				"url": "https://api.github.com/users/wolfordj",
				"method": "GET",
				"header": [],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "testSetCountEnvironmentVar",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Get current Gist count for Rufian55",
							"var count = 0;",
							"for (var i = 0; i < jsonData.length; i++) {",
							"    count++;",
							"}",
							"",
							"postman.clearEnvironmentVariable(\"co\");",
							"",
							"postman.setEnvironmentVariable(\"count1\", count);",
							"",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "https://api.github.com/gists",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer = a 40 char alphanumeric string",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "testCreateGist",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// See body tab for json formatted contents sent.",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Get current Gist ID following Rufian55 gist create call.",
							"var retID = jsonData.id;",
							"",
							"postman.setEnvironmentVariable(\"gistID\", retID);",
							"",
							"tests[\"Successful POST request\"] = responseCode.code === 201 || responseCode.code === 202;",
							""
						]
					}
				}
			],
			"request": {
				"url": "https://api.github.com/gists",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer = a 40 char alphanumeric string",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"description\": \"A statement concerning Bashir Assad of Syria\",\n  \"public\": true,\n  \"files\": {\n    \"Accused.txt\": {\n      \"content\": \"You used sarin gas to kill innocent civilians! More than once! You will answer for your crimes.\"\n    }\n  }\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "testSetGistCountReturnedVar",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Get current Gist count for Rufian55",
							"var counted = 0;",
							"for (var i = 0; i < jsonData.length; i++) {",
							"    counted++;",
							"}",
							"",
							"postman.setEnvironmentVariable(\"count2\", counted);",
							"",
							"var temp1 = postman.getEnvironmentVariable(\"count1\");",
							"",
							"// Increment the previouos gist (count1) var.",
							"temp1++;",
							"",
							"var temp2 = postman.getEnvironmentVariable(\"count2\");",
							"",
							"tests[\"Gist Created, myGists incremented by 1\"] = temp1 == temp2;"
						]
					}
				}
			],
			"request": {
				"url": "https://api.github.com/gists",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer = a 40 char alphanumeric string",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "testCreateGistContent",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// JSON value tests following create Gist via captured Gist id..",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Test file name match.",
							"tests[\"JSON \\\"filename\\\" matches string 1\"] = jsonData.files[postman.getEnvironmentVariable(\"string_01\")].filename == postman.getEnvironmentVariable(\"string_01\");",
							"",
							"// Test \"description\" string match.",
							"tests[\"JSON \\\"description\\\" matches string 2\"] = jsonData.description == postman.getEnvironmentVariable(\"string_02\");",
							"",
							"// Test \"content\" string match.",
							"tests[\"JSON \\\"content\\\" matches string 3\"] = jsonData.files[postman.getEnvironmentVariable(\"string_01\")].content == postman.getEnvironmentVariable(\"string_03\");",
							"",
							"tests[\"jsonData.public set to \\\"true\\\"\"] = jsonData.public === true;",
							"",
							"//CITATION: http://stackoverflow.com/questions/2577172/how-to-get-json-objects-value-if-its-name-contains-dots",
							""
						]
					}
				}
			],
			"request": {
				"url": "https://api.github.com/gists/{{gistID}}",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer = a 40 char alphanumeric string",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "testEditGist",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// See body tab for json formatted contents sent.",
							"",
							"tests[\"testEditGist Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Test file name match.",
							"tests[\"JSON \\\"filename\\\" matches string 1\"] = jsonData.files[postman.getEnvironmentVariable(\"string_01\")].filename == postman.getEnvironmentVariable(\"string_01\");",
							"",
							"// Test \"description\" string match.",
							"tests[\"JSON \\\"description\\\" matches string 2\"] = jsonData.description == postman.getEnvironmentVariable(\"string_04\");",
							"",
							"// Test \"content\" string match. Note escaped '\\n'.",
							"tests[\"JSON \\\"content\\\" matches string 3\"] = jsonData.files[postman.getEnvironmentVariable(\"string_01\")].content == postman.getEnvironmentVariable(\"string_05\");",
							"",
							"tests[\"jsonData.public set to \\\"true\\\"\"] = jsonData.public === true;"
						]
					}
				}
			],
			"request": {
				"url": "https://api.github.com/gists/{{gistID}}",
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer = a 40 char alphanumeric string",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"description\": \"DJT is Earth's Avenging Angel.\",\r\n  \"files\": {\r\n    \"Accused.txt\": {\r\n      \"content\": \"Launch the missiles!\"\r\n    }\r\n  }\r\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "testStarGist",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Star a Gist returned Status code 204\"] = responseCode.code === 204;"
						]
					}
				}
			],
			"request": {
				"url": "https://api.github.com/gists/{{gistID}}/star",
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer = a 40 char alphanumeric string",
						"description": ""
					},
					{
						"key": "Content-Length",
						"value": "0",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "testStarredGistsCorrect",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"// Iterate jsonData.",
							"var count = 0;",
							"for (var i = 0; i < jsonData.length; i++) {",
							"    count++;",
							"}",
							"",
							"// Number of starred gists == 1.",
							"tests[\"MY starred Gist count == 1\"] = count == 1;",
							"",
							"// Returned Gist ID matches Gist created by testCreateGist().",
							"tests[\"Stared Gist returned contains correct ID string.\"] = jsonData[0].id == postman.getEnvironmentVariable(\"gistID\");",
							"",
							""
						]
					}
				}
			],
			"request": {
				"url": "https://api.github.com/gists/starred",
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer = a 40 char alphanumeric string",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "testUnstarGist",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Unstar a Gist returned Status code 204\"] = responseCode.code === 204;"
						]
					}
				}
			],
			"request": {
				"url": "https://api.github.com/gists/{{gistID}}/star",
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer = a 40 char alphanumeric string",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		},
		{
			"name": "testDeleteGistByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Gist Deleted with Status code = 204\"] = responseCode.code === 204;"
						]
					}
				}
			],
			"request": {
				"url": "https://api.github.com/gists/{{gistID}}",
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer = a 40 char alphanumeric string",
						"description": ""
					}
				],
				"body": {},
				"description": ""
			},
			"response": []
		}
	]
}